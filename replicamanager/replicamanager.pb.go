// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: replicamanager/replicamanager.proto

package replicamanager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	replica "github.com/mccurdyc/lodiseval/replica"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// =====================================================
// Replica Management.
// =====================================================
type CreateReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Algorithm       string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Store           string `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
	SyncIntervalSec uint32 `protobuf:"varint,4,opt,name=sync_interval_sec,json=syncIntervalSec,proto3" json:"sync_interval_sec,omitempty"`
}

func (x *CreateReplicaRequest) Reset() {
	*x = CreateReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaRequest) ProtoMessage() {}

func (x *CreateReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateReplicaRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateReplicaRequest) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *CreateReplicaRequest) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreateReplicaRequest) GetSyncIntervalSec() uint32 {
	if x != nil {
		return x.SyncIntervalSec
	}
	return 0
}

type CreateReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateReplicaResponse) Reset() {
	*x = CreateReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaResponse) ProtoMessage() {}

func (x *CreateReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaResponse.ProtoReflect.Descriptor instead.
func (*CreateReplicaResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{1}
}

func (x *CreateReplicaResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListReplicasRequest) Reset() {
	*x = ListReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicasRequest) ProtoMessage() {}

func (x *ListReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicasRequest.ProtoReflect.Descriptor instead.
func (*ListReplicasRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{2}
}

type ListReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas []*replica.Replica `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *ListReplicasResponse) Reset() {
	*x = ListReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicasResponse) ProtoMessage() {}

func (x *ListReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicasResponse.ProtoReflect.Descriptor instead.
func (*ListReplicasResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{3}
}

func (x *ListReplicasResponse) GetReplicas() []*replica.Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type DeleteReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteReplicaRequest) Reset() {
	*x = DeleteReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicaRequest) ProtoMessage() {}

func (x *DeleteReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicaRequest.ProtoReflect.Descriptor instead.
func (*DeleteReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteReplicaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteReplicaResponse) Reset() {
	*x = DeleteReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicaResponse) ProtoMessage() {}

func (x *DeleteReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicaResponse.ProtoReflect.Descriptor instead.
func (*DeleteReplicaResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteReplicaResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// =====================================================
// Leader Management.
// =====================================================
type SetLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetLeaderRequest) Reset() {
	*x = SetLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLeaderRequest) ProtoMessage() {}

func (x *SetLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLeaderRequest.ProtoReflect.Descriptor instead.
func (*SetLeaderRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{6}
}

func (x *SetLeaderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLeaderResponse) Reset() {
	*x = SetLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLeaderResponse) ProtoMessage() {}

func (x *SetLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLeaderResponse.ProtoReflect.Descriptor instead.
func (*SetLeaderResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{7}
}

type GetLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLeaderRequest) Reset() {
	*x = GetLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderRequest) ProtoMessage() {}

func (x *GetLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{8}
}

type GetLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLeaderResponse) Reset() {
	*x = GetLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderResponse) ProtoMessage() {}

func (x *GetLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{9}
}

func (x *GetLeaderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// =====================================================
// Value Storage and Retrieval Operations.
// =====================================================
type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{10}
}

func (x *SetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetResponse) Reset() {
	*x = SetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResponse) ProtoMessage() {}

func (x *SetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResponse.ProtoReflect.Descriptor instead.
func (*SetResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{11}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{12}
}

func (x *GetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{13}
}

func (x *GetResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// =====================================================
// Algorithm Management.
// =====================================================
type SetAlgorithmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *SetAlgorithmRequest) Reset() {
	*x = SetAlgorithmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlgorithmRequest) ProtoMessage() {}

func (x *SetAlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlgorithmRequest.ProtoReflect.Descriptor instead.
func (*SetAlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{14}
}

func (x *SetAlgorithmRequest) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

type SetAlgorithmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAlgorithmResponse) Reset() {
	*x = SetAlgorithmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlgorithmResponse) ProtoMessage() {}

func (x *SetAlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlgorithmResponse.ProtoReflect.Descriptor instead.
func (*SetAlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{15}
}

type GetAlgorithmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAlgorithmRequest) Reset() {
	*x = GetAlgorithmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmRequest) ProtoMessage() {}

func (x *GetAlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmRequest.ProtoReflect.Descriptor instead.
func (*GetAlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{16}
}

type GetAlgorithmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *GetAlgorithmResponse) Reset() {
	*x = GetAlgorithmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicamanager_replicamanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmResponse) ProtoMessage() {}

func (x *GetAlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replicamanager_replicamanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmResponse.ProtoReflect.Descriptor instead.
func (*GetAlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_replicamanager_replicamanager_proto_rawDescGZIP(), []int{17}
}

func (x *GetAlgorithmResponse) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

var File_replicamanager_replicamanager_proto protoreflect.FileDescriptor

var file_replicamanager_replicamanager_proto_rawDesc = []byte{
	0x0a, 0x23, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x22,
	0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x44, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22,
	0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x32, 0x84, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x76, 0x63, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x24, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x63, 0x63, 0x75, 0x72, 0x64,
	0x79, 0x63, 0x2f, 0x6c, 0x6f, 0x64, 0x69, 0x73, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_replicamanager_replicamanager_proto_rawDescOnce sync.Once
	file_replicamanager_replicamanager_proto_rawDescData = file_replicamanager_replicamanager_proto_rawDesc
)

func file_replicamanager_replicamanager_proto_rawDescGZIP() []byte {
	file_replicamanager_replicamanager_proto_rawDescOnce.Do(func() {
		file_replicamanager_replicamanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_replicamanager_replicamanager_proto_rawDescData)
	})
	return file_replicamanager_replicamanager_proto_rawDescData
}

var file_replicamanager_replicamanager_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_replicamanager_replicamanager_proto_goTypes = []interface{}{
	(*CreateReplicaRequest)(nil),  // 0: replicamanager.CreateReplicaRequest
	(*CreateReplicaResponse)(nil), // 1: replicamanager.CreateReplicaResponse
	(*ListReplicasRequest)(nil),   // 2: replicamanager.ListReplicasRequest
	(*ListReplicasResponse)(nil),  // 3: replicamanager.ListReplicasResponse
	(*DeleteReplicaRequest)(nil),  // 4: replicamanager.DeleteReplicaRequest
	(*DeleteReplicaResponse)(nil), // 5: replicamanager.DeleteReplicaResponse
	(*SetLeaderRequest)(nil),      // 6: replicamanager.SetLeaderRequest
	(*SetLeaderResponse)(nil),     // 7: replicamanager.SetLeaderResponse
	(*GetLeaderRequest)(nil),      // 8: replicamanager.GetLeaderRequest
	(*GetLeaderResponse)(nil),     // 9: replicamanager.GetLeaderResponse
	(*SetRequest)(nil),            // 10: replicamanager.SetRequest
	(*SetResponse)(nil),           // 11: replicamanager.SetResponse
	(*GetRequest)(nil),            // 12: replicamanager.GetRequest
	(*GetResponse)(nil),           // 13: replicamanager.GetResponse
	(*SetAlgorithmRequest)(nil),   // 14: replicamanager.SetAlgorithmRequest
	(*SetAlgorithmResponse)(nil),  // 15: replicamanager.SetAlgorithmResponse
	(*GetAlgorithmRequest)(nil),   // 16: replicamanager.GetAlgorithmRequest
	(*GetAlgorithmResponse)(nil),  // 17: replicamanager.GetAlgorithmResponse
	(*replica.Replica)(nil),       // 18: replica.Replica
}
var file_replicamanager_replicamanager_proto_depIdxs = []int32{
	18, // 0: replicamanager.ListReplicasResponse.replicas:type_name -> replica.Replica
	0,  // 1: replicamanager.ReplicaManagerSvc.CreateReplica:input_type -> replicamanager.CreateReplicaRequest
	2,  // 2: replicamanager.ReplicaManagerSvc.ListReplicas:input_type -> replicamanager.ListReplicasRequest
	4,  // 3: replicamanager.ReplicaManagerSvc.DeleteReplica:input_type -> replicamanager.DeleteReplicaRequest
	6,  // 4: replicamanager.ReplicaManagerSvc.SetLeader:input_type -> replicamanager.SetLeaderRequest
	8,  // 5: replicamanager.ReplicaManagerSvc.GetLeader:input_type -> replicamanager.GetLeaderRequest
	10, // 6: replicamanager.ReplicaManagerSvc.Set:input_type -> replicamanager.SetRequest
	12, // 7: replicamanager.ReplicaManagerSvc.Get:input_type -> replicamanager.GetRequest
	14, // 8: replicamanager.ReplicaManagerSvc.SetAlgorithm:input_type -> replicamanager.SetAlgorithmRequest
	16, // 9: replicamanager.ReplicaManagerSvc.GetAlgorithm:input_type -> replicamanager.GetAlgorithmRequest
	1,  // 10: replicamanager.ReplicaManagerSvc.CreateReplica:output_type -> replicamanager.CreateReplicaResponse
	3,  // 11: replicamanager.ReplicaManagerSvc.ListReplicas:output_type -> replicamanager.ListReplicasResponse
	5,  // 12: replicamanager.ReplicaManagerSvc.DeleteReplica:output_type -> replicamanager.DeleteReplicaResponse
	7,  // 13: replicamanager.ReplicaManagerSvc.SetLeader:output_type -> replicamanager.SetLeaderResponse
	9,  // 14: replicamanager.ReplicaManagerSvc.GetLeader:output_type -> replicamanager.GetLeaderResponse
	11, // 15: replicamanager.ReplicaManagerSvc.Set:output_type -> replicamanager.SetResponse
	13, // 16: replicamanager.ReplicaManagerSvc.Get:output_type -> replicamanager.GetResponse
	15, // 17: replicamanager.ReplicaManagerSvc.SetAlgorithm:output_type -> replicamanager.SetAlgorithmResponse
	17, // 18: replicamanager.ReplicaManagerSvc.GetAlgorithm:output_type -> replicamanager.GetAlgorithmResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_replicamanager_replicamanager_proto_init() }
func file_replicamanager_replicamanager_proto_init() {
	if File_replicamanager_replicamanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_replicamanager_replicamanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlgorithmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlgorithmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlgorithmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicamanager_replicamanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlgorithmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_replicamanager_replicamanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replicamanager_replicamanager_proto_goTypes,
		DependencyIndexes: file_replicamanager_replicamanager_proto_depIdxs,
		MessageInfos:      file_replicamanager_replicamanager_proto_msgTypes,
	}.Build()
	File_replicamanager_replicamanager_proto = out.File
	file_replicamanager_replicamanager_proto_rawDesc = nil
	file_replicamanager_replicamanager_proto_goTypes = nil
	file_replicamanager_replicamanager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReplicaManagerSvcClient is the client API for ReplicaManagerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaManagerSvcClient interface {
	// =====================================================
	// Replica Management.
	// =====================================================
	CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*CreateReplicaResponse, error)
	ListReplicas(ctx context.Context, in *ListReplicasRequest, opts ...grpc.CallOption) (*ListReplicasResponse, error)
	DeleteReplica(ctx context.Context, in *DeleteReplicaRequest, opts ...grpc.CallOption) (*DeleteReplicaResponse, error)
	// =====================================================
	// Leader Management.
	// =====================================================
	SetLeader(ctx context.Context, in *SetLeaderRequest, opts ...grpc.CallOption) (*SetLeaderResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
	// =====================================================
	// Value Storage and Retrieval Operations.
	// =====================================================
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// =====================================================
	// Algorithm Management.
	// =====================================================
	SetAlgorithm(ctx context.Context, in *SetAlgorithmRequest, opts ...grpc.CallOption) (*SetAlgorithmResponse, error)
	GetAlgorithm(ctx context.Context, in *GetAlgorithmRequest, opts ...grpc.CallOption) (*GetAlgorithmResponse, error)
}

type replicaManagerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaManagerSvcClient(cc grpc.ClientConnInterface) ReplicaManagerSvcClient {
	return &replicaManagerSvcClient{cc}
}

func (c *replicaManagerSvcClient) CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*CreateReplicaResponse, error) {
	out := new(CreateReplicaResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/CreateReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) ListReplicas(ctx context.Context, in *ListReplicasRequest, opts ...grpc.CallOption) (*ListReplicasResponse, error) {
	out := new(ListReplicasResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/ListReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) DeleteReplica(ctx context.Context, in *DeleteReplicaRequest, opts ...grpc.CallOption) (*DeleteReplicaResponse, error) {
	out := new(DeleteReplicaResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/DeleteReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) SetLeader(ctx context.Context, in *SetLeaderRequest, opts ...grpc.CallOption) (*SetLeaderResponse, error) {
	out := new(SetLeaderResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/SetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) SetAlgorithm(ctx context.Context, in *SetAlgorithmRequest, opts ...grpc.CallOption) (*SetAlgorithmResponse, error) {
	out := new(SetAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/SetAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaManagerSvcClient) GetAlgorithm(ctx context.Context, in *GetAlgorithmRequest, opts ...grpc.CallOption) (*GetAlgorithmResponse, error) {
	out := new(GetAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/replicamanager.ReplicaManagerSvc/GetAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaManagerSvcServer is the server API for ReplicaManagerSvc service.
type ReplicaManagerSvcServer interface {
	// =====================================================
	// Replica Management.
	// =====================================================
	CreateReplica(context.Context, *CreateReplicaRequest) (*CreateReplicaResponse, error)
	ListReplicas(context.Context, *ListReplicasRequest) (*ListReplicasResponse, error)
	DeleteReplica(context.Context, *DeleteReplicaRequest) (*DeleteReplicaResponse, error)
	// =====================================================
	// Leader Management.
	// =====================================================
	SetLeader(context.Context, *SetLeaderRequest) (*SetLeaderResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
	// =====================================================
	// Value Storage and Retrieval Operations.
	// =====================================================
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// =====================================================
	// Algorithm Management.
	// =====================================================
	SetAlgorithm(context.Context, *SetAlgorithmRequest) (*SetAlgorithmResponse, error)
	GetAlgorithm(context.Context, *GetAlgorithmRequest) (*GetAlgorithmResponse, error)
}

// UnimplementedReplicaManagerSvcServer can be embedded to have forward compatible implementations.
type UnimplementedReplicaManagerSvcServer struct {
}

func (*UnimplementedReplicaManagerSvcServer) CreateReplica(context.Context, *CreateReplicaRequest) (*CreateReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplica not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) ListReplicas(context.Context, *ListReplicasRequest) (*ListReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicas not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) DeleteReplica(context.Context, *DeleteReplicaRequest) (*DeleteReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplica not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) SetLeader(context.Context, *SetLeaderRequest) (*SetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeader not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) SetAlgorithm(context.Context, *SetAlgorithmRequest) (*SetAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlgorithm not implemented")
}
func (*UnimplementedReplicaManagerSvcServer) GetAlgorithm(context.Context, *GetAlgorithmRequest) (*GetAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgorithm not implemented")
}

func RegisterReplicaManagerSvcServer(s *grpc.Server, srv ReplicaManagerSvcServer) {
	s.RegisterService(&_ReplicaManagerSvc_serviceDesc, srv)
}

func _ReplicaManagerSvc_CreateReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).CreateReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/CreateReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).CreateReplica(ctx, req.(*CreateReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_ListReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).ListReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/ListReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).ListReplicas(ctx, req.(*ListReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_DeleteReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).DeleteReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/DeleteReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).DeleteReplica(ctx, req.(*DeleteReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_SetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).SetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/SetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).SetLeader(ctx, req.(*SetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_SetAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).SetAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/SetAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).SetAlgorithm(ctx, req.(*SetAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaManagerSvc_GetAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaManagerSvcServer).GetAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicamanager.ReplicaManagerSvc/GetAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaManagerSvcServer).GetAlgorithm(ctx, req.(*GetAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicaManagerSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replicamanager.ReplicaManagerSvc",
	HandlerType: (*ReplicaManagerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReplica",
			Handler:    _ReplicaManagerSvc_CreateReplica_Handler,
		},
		{
			MethodName: "ListReplicas",
			Handler:    _ReplicaManagerSvc_ListReplicas_Handler,
		},
		{
			MethodName: "DeleteReplica",
			Handler:    _ReplicaManagerSvc_DeleteReplica_Handler,
		},
		{
			MethodName: "SetLeader",
			Handler:    _ReplicaManagerSvc_SetLeader_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _ReplicaManagerSvc_GetLeader_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ReplicaManagerSvc_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReplicaManagerSvc_Get_Handler,
		},
		{
			MethodName: "SetAlgorithm",
			Handler:    _ReplicaManagerSvc_SetAlgorithm_Handler,
		},
		{
			MethodName: "GetAlgorithm",
			Handler:    _ReplicaManagerSvc_GetAlgorithm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicamanager/replicamanager.proto",
}
